{"version":3,"file":"ais-instant-search.js","sources":["../../src/components/ais-instant-search.gjs"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport instantsearch from 'instantsearch.js';\nimport { hash } from '@ember/helper';\nimport { inject as service } from '@ember/service';\nimport { configure } from 'instantsearch.js/es/widgets';\nimport TypesenseInstantSearchAdapter from 'typesense-instantsearch-adapter';\nexport default class AisInstantSearch extends Component {\n    @service\n    aisInstantSearch;\n    @tracked\n    searchClient = null;\n    @tracked\n    instantSearchInstance = null;\n    @tracked\n    searchBoxElement = null;\n    @tracked\n    hitsElement = null;\n    constructor(){\n        super(...arguments);\n        if (!this.args.apiData.apiKey) {\n            console.error('The Typesense API key is missing. Please provide the API key');\n            return;\n        }\n        if (!this.args.apiData.port) {\n            console.error('Port is missing. Please provide the port number for the Typesense server');\n            return;\n        }\n        if (!this.args.apiData.host) {\n            console.error('Host is missing. Please provide the host for the Typesense server');\n            return;\n        }\n        if (!this.args.apiData.protocol) {\n            console.error('Protocol is missing (http/https). Please provide the protocol for the Typesense server');\n            return;\n        }\n        if (!this.args.apiData.indexName) {\n            console.error('Index name is missing. Please provide the index name for the Typesense server');\n            return;\n        }\n        if (!this.args.apiData.queryBy) {\n            console.error('queryBy is missing. Please provide the queryBy field(s) for the Typesense server');\n            return;\n        }\n        this.searchClient = this.createSearchClient();\n        if (!this.searchClient) {\n            return;\n        }\n        this.instantSearchInstance = instantsearch({\n            indexName: this.args.apiData.indexName,\n            searchClient: this.searchClient,\n            numberLocale: this.args.numberLocale,\n            searchFunction: this.args.searchFunction,\n            initialUiState: this.args.initialUiState,\n            onStateChange: this.args.onStateChange,\n            stalledSearchDelay: this.args.stalledSearchDelay,\n            routing: this.args.routing,\n            insights: this.args.insights,\n            insightsClient: this.args.insightsClient,\n            future: {\n                preserveSharedStateOnUnmount: this.args.preserveSharedStateOnUnmount || true,\n                persistHierarchicalRootCount: this.args.persistHierarchicalRootCount\n            }\n        });\n        if (this.args.configurationOptions) {\n            // See https://www.algolia.com/doc/api-reference/search-api-parameters/\n            // for available search API configuration options\n            this.instantSearchInstance.addWidgets([\n                configure(this.args.configurationOptions)\n            ]);\n        }\n        this.applyMiddleware();\n    }\n    createSearchClient() {\n        try {\n            // const searchClient = algoliasearch(this.args.appId, this.args.apiKey);\n            const typesenseInstantsearchAdapter1 = new TypesenseInstantSearchAdapter({\n                server: {\n                    apiKey: this.args.apiData.apiKey,\n                    nodes: [\n                        {\n                            host: this.args.apiData.host,\n                            port: this.args.apiData.port,\n                            protocol: this.args.apiData.protocol,\n                            ...(this.args.apiData.path ? {\n                                path: this.args.apiData.path\n                            } : {})\n                        }\n                    ]\n                },\n                additionalSearchParameters: {\n                    query_by: this.args.apiData.queryBy\n                },\n                collectionSpecificSearchParameters: this.args.collectionSpecificSearchParameters\n            });\n            const searchClient1 = typesenseInstantsearchAdapter1.searchClient;\n            if (!searchClient1) {\n                throw new Error('Failed to create searchClient');\n            }\n            return searchClient1;\n        } catch (error1) {\n            console.error(error1, 'Error creating search client');\n        }\n    }\n    // See: https://www.algolia.com/doc/api-reference/widgets/middleware/js/\n    // Middleware is a function that returns an array of middleware functions.\n    applyMiddleware() {\n        if (!this.instantSearchInstance) {\n            console.error('InstantSearch instance not initialized. Middleware cannot be applied.');\n            return;\n        }\n        if (!this.args.middleware) {\n            return;\n        }\n        if (!Array.isArray(this.args.middleware)) {\n            console.error('Invalid middleware provided. Please provide an array of functions.');\n            return;\n        }\n        this.args.middleware.forEach((middlewareFunction1)=>{\n            if (typeof middlewareFunction1 !== 'function') {\n                console.error('Invalid middleware provided. Each middleware should be a function.');\n                return;\n            }\n            this.instantSearchInstance.use(middlewareFunction1);\n        });\n    }\n    static{\n        template(`\n    {{yield (hash searchInstance=this.instantSearchInstance)}}\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["AisInstantSearch","Component","g","this","prototype","service","i","void 0","tracked","constructor","arguments","args","apiData","apiKey","console","error","port","host","protocol","indexName","queryBy","searchClient","createSearchClient","instantSearchInstance","instantsearch","numberLocale","searchFunction","initialUiState","onStateChange","stalledSearchDelay","routing","insights","insightsClient","future","preserveSharedStateOnUnmount","persistHierarchicalRootCount","configurationOptions","addWidgets","configure","applyMiddleware","typesenseInstantsearchAdapter1","TypesenseInstantSearchAdapter","server","nodes","path","additionalSearchParameters","query_by","collectionSpecificSearchParameters","searchClient1","Error","error1","middleware","Array","isArray","forEach","middlewareFunction1","use","setComponentTemplate","precompileTemplate","strictMode","scope","hash"],"mappings":"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"}